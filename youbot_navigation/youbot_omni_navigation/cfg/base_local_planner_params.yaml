controller_frequency: 5.0
recovery_behaviour_enabled: true

GlobalPlanner:
  orientation_mode: 2

NavfnROS:
  allow_unknown: true # Specifies whether or not to allow navfn to create plans that traverse unknown space.
  default_tolerance: 0.05 # A tolerance on the goal point for the planner.

TrajectoryPlannerROS:
  # Robot Configuration Parameters
  acc_lim_x: 2.5
  acc_lim_theta:  3.2

  max_vel_x: 1.0
  min_vel_x: 0.0

  max_vel_theta: 1.0 
  min_vel_theta: -1.0
  min_in_place_vel_theta: 0.2

  holonomic_robot: true
  escape_vel: -0.1

  # Goal Tolerance Parameters
  yaw_goal_tolerance: 0.1
  xy_goal_tolerance: 0.05
  latch_xy_goal_tolerance: false # may wanat to make this true

  # Forward Simulation Parameters
  sim_time: 2.0
  sim_granularity: 0.02
  angular_sim_granularity: 0.02
  vx_samples: 6
  vtheta_samples: 20
  controller_frequency: 20.0

  # Trajectory scoring parameters
  meter_scoring: true # Whether the gdist_scale and pdist_scale parameters should assume that goal_distance and path_distance are expressed in units of meters or cells. Cells are assumed by default (false).
  occdist_scale:  0.1 #The weighting for how much the controller should attempt to avoid obstacles. default 0.01
  pdist_scale: 0.75  #     The weighting for how much the controller should stay close to the path it was given . default 0.6
  gdist_scale: 1.0 #     The weighting for how much the controller should attempt to reach its local goal, also controls speed  default 0.8

  heading_lookahead: 0.325  #How far to look ahead in meters when scoring different in-place-rotation trajectories
  heading_scoring: false  #Whether to score based on the robot's heading to the path or its distance from the path. default false
  heading_scoring_timestep: 0.8   #How far to look ahead in time in seconds along the simulated trajectory when using heading scoring (double, default: 0.8)
  dwa: true # Whether to use the Dynamic Window Approach (DWA)_ or whether to use Trajectory Rollout
  simple_attractor: false
  publish_cost_grid_pc: true

  # Oscillation Prevention Parameters
  oscillation_reset_dist: 0.25 # How far the robot must travel in meters before oscillation flags are reset (double, default: 0.05)
  escape_reset_dist: 0.1
  escape_reset_theta: 0.1


DWAPlannerROS:

  holonomic_robot: true
  global_frame_id: odom
  # Tolerances                  Defaults
  yaw_goal_tolerance: 0.15      # 0.05
  xy_goal_tolerance:  0.15      # 0.10
  latch_xy_goal_tolerance: false # false

  # Forward simulation          Defaults
  use_dwa: true                 # true
  sim_time: 1.0                 # 1.7
  sim_granularity: 0.025        # 0.025
  angular_sim_granularity: 0.017 # 0.10 (1 degree = 0.017 rad)
  vx_samples: 3                 # 3
  vy_samples: 10                # 10
  vth_samples: 20               # 20

  # Scoring                     Defaults
  meter_scoring: true          # Is this even taken into account?
  path_distance_bias: 32.0 # 1.00      # 32.0
  goal_distance_bias: 24.0 # 0.10      # 24.0
  occdist_scale: 0.01           # 0.01
  forward_point_distance: 0.325 # 0.325
  stop_time_buffer: 0.20        # 0.20
  scaling_speed: 0.25           # 0.25
  max_scaling_factor: 0.20      # 0.20
  heading_lookahead: 0.325 # 0.325
  heading_scoring_timestep: 0.8
  heading_scoring: false         # Is this even taken into account?
  penalize_negative_x: false    # Is this even taken into account?

  # Acceleration and velocity limits

  # acc_limit_trans: 1.0
  acc_lim_x: 1.0                # 2.5
  acc_lim_y: 1.0                # 2.5
  acc_lim_theta: 1.0            # 3.2

  # max_trans_vel: 0.5
  # min_trans_vel: 0.1
  max_vel_x: +1.0 # +0.3
  min_vel_x: -1.0 # -0.3
  max_vel_y: +1.0 # +0.3
  min_vel_y: -1.0 # -0.3

  max_rot_vel: 1.0 # 1.0
  min_rot_vel: 0.05 # 0.4

  # Other                       Defaults
  oscillation_reset_dist: 0.05  # 0.05
  oscillation_reset_angle: 0.20 # 0.20
  prune_plan: false             # true
  trans_stopped_vel: 0.1        # 0.1
  rot_stopped_vel: 0.1          # 0.1
  publish_cost_grid_pc: false   # false


# Teb v1 153-439

TebLocalPlannerROS:

####################################################
#Robot Configuration Parameters
####################################################
 acc_lim_x: 1.25
 #Maximum translational acceleration of the robot in meters/sec^2 

 acc_lim_theta: 1.6
 #Maximum angular acceleration of the robot in radians/sec^2 

 max_vel_x: 0.5
 #Maximum translational velocity of the robot in meters/sec 

 max_vel_x_backwards: 0.5
 #Maximum absolute translational velocity of the robot while driving backwards in meters/sec. See optimization parameter weight_kinematics_forward_drive 

 max_vel_theta: 1.2
 #Maximum angular velocity of the robot in radians/sec 
 
 footprint_model/type: "line"
 #Specify the robot footprint model type used for optimization. Different types are "point", "circular", "line", 
 #"two_circles" and "polygon." 
 #The type of the model significantly influences the required computation time.

############################
###Type Point
############################

#no other params needed

############################
###Type Line
############################
 footprint_model/line_start: [-0.3, -0.18] 
 #This parameter is only relevant for type "line". It contains the start coordinates of the line segment. 

 footprint_model/line_end: [0.3, 0.18]
 #This parameter is only relevant for type "line". It contains the end coordinates of the line segment.

############################
###For Holonomic robots
############################
 max_vel_y: 0.5

 acc_lim_y: 1.25

 #Set both to 0.0 for nonholonomic

####################################################
#Goal Tolerance Parameters 
####################################################
 xy_goal_tolerance: 0.15 # 0.05 # 0.15
 #Allowed final euclidean distance to the goal position in meters 

 yaw_goal_tolerance: 0.1 # 0.05 # 0.02
 #Allowed final orientation error in radians 

 free_goal_vel: false
 #Remove the goal velocity constraint such that the robot can arrive at the goal with maximum speed

####################################################
#Trajectory Configuration Parameters
####################################################
 dt_ref: 0.3
 #Desired temporal resolution of the trajectory

 dt_hysteresis: 0.1
 #Hysteresis for automatic resizing depending on the current temporal resolution, 
 #usually approx. 10% of dt_ref is recommended

 min_samples: 3
 #Minimum number of samples

 global_plan_overwrite_orientation: false
 #Overwrite orientation of local subgoals provided by the global planner (since they often provide only a 2D path)

 global_plan_viapoint_sep: -0.1
 #If positive, via-points are extrected from the global plan (path-following mode). 
 #The value determines the resolution of the reference path (min. separation between each two consecutive via-points along the global plan, 
 #if negative (disabled). Refer to parameter weight_viapoint for adjusting the intensity. New in version 0.4

 max_global_plan_lookahead_dist: 100.0
 #Specify the maximum length (cumulative Euclidean distances) of the subset of the global plan taken into account for optimization. 
 #The actual length is than determined by the logical conjunction of the local costmap size and this maximum bound. 
 #Set to zero or negative in order to deactivate this limitation.

 force_reinit_new_goal_dist: 1.0
 #Reinitialize the trajectory if a previous goal is updated with a separation of more than the specified value in meters 

 feasibility_check_no_poses : 4
 #Specify up to which pose on the predicted plan the feasibility should be checked each sampling interval. 

 shrink_horizon_backup: true
 #Allows the planner to shrink the horizon temporary (50%) in case of automatically detected issues (e.g. infeasibility). 
 #Also see parameter shrink_horizon_min_duration.

 publish_feedback: false
 #Publish planner feedback containing the full trajectory and a list of active obstacles 
 #(should be enabled only for evaluation or debugging. See list of publishers above. 

 allow_init_with_backwards_motion: true
 #allows backward motion incase the goal behind start

 exact_arc_length: true
 #If true, the planner uses the exact arc length in velocity, acceleration and turning rate computations 
 #(-> increased cpu time), otherwise the Euclidean approximation is used.

 shrink_horizon_min_duration: 10.0
 #Specify minimum duration for the reduced horizon in case an infeasible trajectory is detected 
 #(refer to parameter shrink_horizon_backup in order to activate the reduced horizon mode).

####################################################
#Obstacle Parameters
####################################################

 min_obstacle_dist: 0.2 # 0.6
 #Minimum desired separation from obstacles in meters 

 include_costmap_obstacles: true
 #Specify if obstacles of the local costmap should be taken into account. Each cell that is marked as 
 #obstacle is considered as a point-obstacle. Therefore do not choose a very small resolution of the costmap 
 #since it increases computation time. In future releases this circumstance is going to be addressed as 
 #well as providing an additional api for dynamic obstacles.

 costmap_obstacles_behind_robot_dist: 1.0
 #Limit the occupied local costmap obstacles taken into account for planning behind the robot (specify distance in meters).

 obstacle_poses_affected: 30
 #Each obstacle position is attached to the closest pose on the trajectory in order to keep a distance. 
 #Additional neighbors can be taken into account as well. Note, this parameter might be removed in future versions, 
 #since the the obstacle association strategy has been modified in kinetic+. Refer to the parameter description of legacy_obstacle_association.

 inflation_dist: 0.05 # 0.8
 #Buffer zone around obstacles with non-zero penalty costs (should be larger than min_obstacle_dist in order to take effect). 
 #Also refer to the weight weight_inflation.

 include_dynamic_obstacles: false
 #If this parameter is set to true, the motion of obstacles with non-zero velocity (provided via user-supplied obstacles on 
 #topic ~/obstacles or obtained from the costmap_converter) is predicted and considered during optimization via a constant velocity model.

 legacy_obstacle_association: false
 #The strategy of connecting trajectory poses with obstacles for optimization has been modified (see changelog). 
 #You can switch to the old/previous strategy by setting this parameter to true. 
 #Old strategy for each obstacle, find the nearest TEB pose 
 #New strategy for each teb pose, find only "relevant" obstacles.

 obstacle_association_force_inclusion_factor: 1.5
 #he non-legacy obstacle association strategy tries to connect only relevant obstacles with the discretized trajectory during optimization. 
 #But all obstacles within a specifed distance are forced to be included (as a multiple of min_obstacle_dist). 
 #E.g. choose 2.0 in order toenforce the consideration obstacles within a radius of 2.0*min_obstacle_dist. 
 #[This parameter is used only if parameter legacy_obstacle_association is false]

 obstacle_association_cutoff_factor: 5
 #See obstacle_association_force_inclusion_factor, but beyond a multiple of [value]*min_obstacle_dist all obstacles are ignored during optimization. 
 #Parameter obstacle_association_force_inclusion_factor is processed first. 
 #[This parameter is used only if parameter legacy_obstacle_association is false]

####################################################
#Optimization Parameters
####################################################

 no_inner_iterations: 2
 #Number of actual solver iterations called in each outerloop iteration. 
 #See param no_outer_iterations.

 no_outer_iterations: 2
 #Each outerloop iteration automatically resizes the trajectory according to the desired temporal resolution dt_ref 
 #and invokes the internal optimizer (that performs no_inner_iterations). 
 #The total number of solver iterations in each planning cycle is therefore the product of both values.

 penalty_epsilon: 0.1  
 #small safety margin to penalty functions for hard-constraint approximations

 weight_max_vel_x: 1.0 
 #Optimization weight for satisfying the maximum allowed translational velocity 

 weight_max_vel_theta: 1.0 
 #Optimization weight for satisfying the maximum allowed angular velocity 

 weight_acc_lim_x: 1.0 
 #Optimization weight for satisfying the maximum allowed translational acceleration 

 weight_acc_lim_theta: 1.0 
 #Optimization weight for satisfying the maximum allowed angular acceleration 

 weight_kinematics_nh: 1 # Default 1000.0 => WE HAVE A HOLONOMIC ROBOT, JUST ADD A SMALL PENALTY
 #Optimization weight for satisfying the non-holonomic kinematics (this parameter must be high 
 #since the kinematics equation constitutes an equality constraint, even a value of 1000 does not 
 #imply a bad matrix condition due to small 'raw' cost values in comparison to other costs).

 weight_kinematics_forward_drive: 10.0
 #Optimization weight for forcing the robot to choose only forward directions (positive transl. velocities). 
 #A small weight (e.g. 1.0) still allows driving backwards.

 weight_kinematics_turning_radius: 1.0
 #Optimization weight for enforcing a minimum turning radius (only for carlike robots).

 weight_optimaltime: 1.0
 #Optimization weight for contracting the trajectory w.r.t transition/execution time

 weight_obstacle: 100.0
 #Optimization weight for keeping a minimum distance from obstacles

 weight_viapoint: 1.0
 #Optimization weight for minimzing the distance to via-points (resp. reference path). 
 #New in version 0.4

 weight_inflation: 0.1
 #Optimization weight for the inflation penalty (should be small).

 weight_adapt_factor: 2.0
 #Some special weights (currently weight_obstacle) are repeatedly scaled by this factor in each outer TEB iteration 
 #(weight_new = weight_old*factor). 
 #Increasing weights iteratively instead of setting a huge value a-priori leads to better numerical conditions of 
 #the underlying optimization problem.

####################################################
#Parallel Planning in distinctive Topologies
####################################################

 enable_homotopy_class_planning: true
 #Activate parallel planning in distinctive topologies (
 #requires much more CPU resources, since multiple trajectories are optimized at once)

 enable_multithreading: true
 #Activate multiple threading in order to plan each trajectory in a different thread

 max_number_classes: 2
 #Specify the maximum number of distinctive trajectories taken into account 
 #(limits computational effort)

 selection_cost_hysteresis: 1.0
 #Specify how much trajectory cost must a new candidate have w.r.t. a previously selected 
 #trajectory in order to be selected (selection if new_cost < old_cost*factor). 

 selection_obst_cost_scale: 100.0
 #Extra scaling of obstacle cost terms just for selecting the 'best' candidate.

 selection_viapoint_cost_scale: 1.0
 #Extra scaling of via-point cost terms just for selecting the 'best' candidate. 
 #New in version 0.4

 selection_alternative_time_cost: false
 #If true, time cost (sum of squared time differences) is replaced by the total 
 #transition time (sum of time differences).

 roadmap_graph_no_samples: 15
 #Specify the number of samples generated for creating the roadmap graph

 roadmap_graph_area_width: 6
 #Random keypoints/waypoints are sampled in a rectangular region between start and goal. 
 #Specify the width of that region in meters.

 h_signature_prescaler: 1.0
 #Scale internal parameter (H-signature) that is used to distinguish between homotopy classes. 
 #Warning reduce this parameter only, if you observe problems with too many obstacles in the local cost map,
 #do not choose it extremly low, otherwise obstacles cannot be distinguished from each other (0.2<value<=1).

 h_signature_threshold: 0.1
 #Two H-signatures are assumed to be equal, if both the difference of real parts and 
 #complex parts are below the specified threshold.

 obstacle_heading_threshold: 1.0
 #Specify the value of the scalar product between obstacle heading and goal heading 
 #in order to take them (obstacles) into account for exploration.

 visualize_hc_graph: false
 #Visualize the graph that is created for exploring distinctive trajectories 
 #(check marker message in rviz)

 viapoints_all_candidates: true
 #If true, all trajectories of different topologies are attached to the set of via-points, 
 #otherwise only the trajectory sharing the same topology as the initial/global plan is 
 #connected with them (no effect on test_optim_node). New in version 0.4

 switching_blocking_period: 2.0
 #Specify a time duration in seconds that needs to be expired before a switch to a new equivalence class is allowed.

####################################################
#Miscellaneous Parameters
####################################################

 odom_topic: odom
 #Topic name of the odometry message, provided by the robot driver or simulator.

 map_frame: map
 #Global planning frame (in case of a static map, this parameter must be usually changed to "/map".


# TEB V2

# TebLocalPlannerROS:
   
#  # Trajectory
  
#  teb_autosize: True
#  dt_ref: 0.3
#  dt_hysteresis: 0.1
#  max_samples: 500
#  global_plan_overwrite_orientation: True
#  allow_init_with_backwards_motion: False
#  max_global_plan_lookahead_dist: 3.0
#  global_plan_viapoint_sep: -1
#  global_plan_prune_distance: 1
#  exact_arc_length: False
#  feasibility_check_no_poses: 5
#  publish_feedback: False
    
#  # Robot
         
#  max_vel_x: 0.4
#  max_vel_x_backwards: 0.4 # 0.2
#  max_vel_y: 0.1
#  max_vel_theta: 0.3
#  acc_lim_x: 0.5
#  acc_lim_y: 0.2
#  acc_lim_theta: 0.5 # 0.5
#  min_turning_radius: 0.0 # omni-drive robot (can turn on place!)

#  footprint_model:
#    type: "point"

#  # GoalTolerance
    
#  xy_goal_tolerance: 0.1
#  yaw_goal_tolerance: 0.05
#  free_goal_vel: False
#  complete_global_plan: True
    
#  # Obstacles
    
#  min_obstacle_dist: 0.25 # This value must also include our robot radius, since footprint_model is set to "point".
#  inflation_dist: 0.6
#  include_costmap_obstacles: True
#  costmap_obstacles_behind_robot_dist: 1.0
#  obstacle_poses_affected: 15
#  costmap_converter_plugin: ""
#  costmap_converter_spin_thread: True
#  costmap_converter_rate: 5

#  # Optimization
    
#  no_inner_iterations: 5
#  no_outer_iterations: 4
#  optimization_activate: True
#  optimization_verbose: False
#  penalty_epsilon: 0.1
#  obstacle_cost_exponent: 4
#  weight_max_vel_x: 2
#  weight_max_vel_y: 2
#  weight_max_vel_theta: 1
#  weight_acc_lim_x: 1
#  weight_acc_lim_y: 1
#  weight_acc_lim_theta: 1
#  weight_kinematics_nh: 1 # WE HAVE A HOLONOMIC ROBOT, JUST ADD A SMALL PENALTY
#  weight_kinematics_forward_drive: 1
#  weight_kinematics_turning_radius: 1
#  weight_optimaltime: 1 # must be > 0
#  weight_shortest_path: 0
#  weight_obstacle: 100
#  weight_inflation: 0.2
#  weight_dynamic_obstacle: 10
#  weight_dynamic_obstacle_inflation: 0.2
#  weight_viapoint: 1
#  weight_adapt_factor: 2

#  # Homotopy Class Planner

#  enable_homotopy_class_planning: True
#  enable_multithreading: True
#  max_number_classes: 4
#  selection_cost_hysteresis: 1.0
#  selection_prefer_initial_plan: 0.9
#  selection_obst_cost_scale: 1.0
#  selection_alternative_time_cost: False
 
#  roadmap_graph_no_samples: 15
#  roadmap_graph_area_width: 5
#  roadmap_graph_area_length_scale: 1.0
#  h_signature_prescaler: 0.5
#  h_signature_threshold: 0.1
#  obstacle_heading_threshold: 0.45
#  switching_blocking_period: 0.0
#  viapoints_all_candidates: True
#  delete_detours_backwards: True
#  max_ratio_detours_duration_best_duration: 3.0
#  visualize_hc_graph: False
#  visualize_with_time_as_z_axis_scale: False

# # Recovery
 
#  shrink_horizon_backup: True
#  shrink_horizon_min_duration: 10
#  oscillation_recovery: True
#  oscillation_v_eps: 0.1
#  oscillation_omega_eps: 0.1
#  oscillation_recovery_min_duration: 10
#  oscillation_filter_duration: 10


#  odom_topic: nav
#  #Topic name of the odometry message, provided by the robot driver or simulator.

#  map_frame: map
#  #Global planning frame (in case of a static map, this parameter must be usually changed to "/map".
